{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDelete","console","log","id","removeCardCallback","handleUpdate","updateCardCallback","state","update","_this$props","text","icon","emoji","undefined","getUnicode","react_default","a","createElement","className","key","onClick","type","aria-label","Component","EMOJI_LIST","NewCardForm","resetState","setState","board","name","handleFormChanges","e","target","updatedState","value","handleSubmit","preventDefault","addCardCallback","renderEmojiOptions","listEmojis","map","emojiStr","i","concat","renderBoardOptions","listBoards","boards","onSubmit","htmlFor","onChange","placeholder","Board","cardId","updatedList","cards","filter","axios","delete","then","response","data","handleAdd","newCard","url","apiPayload","objectSpread","post","card","push","errorMessage","catch","error","message","_this2","boardName","get","boardData","cardData","_this3","cardList","src_components_Card","assign","src_components_NewCardForm","App","src_components_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qXAqEeA,qBA9DX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQVQ,aAAe,WACXC,QAAQC,IAAIT,EAAKD,MAAMW,IACvBV,EAAKD,MAAMY,mBAAmBX,EAAKD,MAAMW,KAX1BV,EAcnBY,aAAe,WACXJ,QAAQC,IAAIT,EAAKD,MAAMW,IACvBV,EAAKD,MAAMc,mBAAmBb,EAAKD,MAAMW,KAZzCV,EAAKc,MAAQ,CACTC,QAAQ,GALGf,wEAoBV,IAAAgB,EACcb,KAAKJ,MAAjBW,EADFM,EACEN,GAAIO,EADND,EACMC,KACPC,EAAOf,KAAKJ,MAAMoB,MAItB,YAHaC,IAATF,IACAA,EAAOC,IAAME,WAAWH,IAGxBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6BC,IAAKhB,GAC7CY,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,IAAoCR,EAApC,KACAK,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAb,IAAqCP,EAArC,KACAI,EAAAC,EAAAC,cAAA,WAASC,UAAU,WAQnBH,EAAAC,EAAAC,cAAA,UACIG,QAASxB,KAAKI,aACdqB,KAAK,SACLH,UAAU,mCACVI,aAAW,UAJf,qBAxCDC,cCCbC,SAAa,CAAC,aAAc,OAAQ,OAAQ,kBAAmB,iBAAkB,MAAM,MAAM,OAAO,WAAW,YAAY,OAAO,MAAM,OAAO,WAAW,SAAS,QAAQ,cAAc,WAAW,WAAW,OAAO,QAAQ,wBAAwB,mBAAmB,UAAU,MAAM,WAAW,aAAa,iCAAiC,gBAAgB,UAAU,uBAAuB,sBAAsB,+BAA+B,OAAO,iBAAiB,UAAU,+BAA+B,mBAAmB,mBAAmB,YAAY,aAAa,cAAc,aAAa,kBAAkB,OAAO,QAAQ,WAAW,eAAe,iBAAiB,WAAW,YAAY,WAAW,aAAa,kBAAkB,WAAW,qBAAqB,iBAAiB,UAAU,UAAU,WAAW,yBAAyB,gBAAgB,YAAY,aAAa,aAAa,QAAQ,WAAW,UAAU,aAAa,WA8Ih6BC,cA5IX,SAAAA,EAAYjC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACfhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMJ,KAUVkC,WAAa,WACTjC,EAAKkC,SAAS,CACVjB,KAAM,GACNE,MAAO,GACPgB,MAAO,CAAEC,KAAM,OAfJpC,EAmBnBqC,kBAAoB,SAACC,GACjB9B,QAAQC,IAAI,UAAW6B,EAAEC,QACzB/B,QAAQC,IAAI,QAAST,EAAKc,OAC1B,IAAM0B,EAAe,GAGrBA,EAFcF,EAAEC,OAAOH,MAEDE,EAAEC,OAAOE,MAC/BzC,EAAKkC,SAASM,IA1BCxC,EA6BnB0C,aAAe,SAACJ,GACZA,EAAEK,iBAEsB,KAApB3C,EAAKc,MAAMG,MAAoC,KAArBjB,EAAKc,MAAMK,QACzCX,QAAQC,IAAI,SAAUT,EAAKc,OAC3Bd,EAAKD,MAAM6C,gBAAgB5C,EAAKc,OAChCd,EAAKiC,eAnCUjC,EAsCnB6C,mBAAqB,WACjB,IAAMC,EAAaf,EAAWgB,IAAI,SAACC,EAAUC,GACzC,OACI3B,EAAAC,EAAAC,cAAA,UACIE,IAAKuB,EACLb,KAAK,QACLK,MAAOO,GAEN7B,IAAME,WAAN,GAAA6B,OAAoBF,OAIjC,MAAO,CAAC1B,EAAAC,EAAAC,cAAA,UAAQY,KAAK,QAAQK,MAAM,GAAGf,IAAI,gBAAlC,kBAA0EoB,IAlDnE9C,EAsDnBmD,mBAAqB,WACjB,IAAMC,EAAapD,EAAKD,MAAMsD,OAAON,IAAI,SAACZ,GAEtC,OACIb,EAAAC,EAAAC,cAAA,UACIY,KAAK,QACLV,IAAKS,EAAMC,KACXK,MAAON,EAAMC,MAEZD,EAAMC,QAInB,MAAO,CAACd,EAAAC,EAAAC,cAAA,UAAQY,KAAK,QAAQK,MAAM,GAAGf,IAAI,gBAAlC,kBAA0E0B,IAhElFpD,EAAKc,MAAQ,CACTG,KAAM,GACNE,MAAO,GACPgB,MAAO,IANInC,wEAuEf,OACQsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,QACIC,UAAU,sBACV6B,SAAUnD,KAAKuC,cAEfpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,cACAH,EAAAC,EAAAC,cAAA,SACIC,UAAU,4BACV8B,QAAQ,QAFZ,QAIAjC,EAAAC,EAAAC,cAAA,SACII,KAAK,OACLQ,KAAK,OACLK,MAAOtC,KAAKW,MAAMG,KAClBQ,UAAU,+BACV+B,SAAUrD,KAAKkC,kBACfoB,YAAY,wBAIhBnC,EAAAC,EAAAC,cAAA,SACIC,UAAU,4BACV8B,QAAQ,SAFZ,SAIAjC,EAAAC,EAAAC,cAAA,UACIY,KAAK,QACL1B,GAAG,QAEHgB,IAAKvB,KAAKJ,MAAM0C,MAChBA,MAAOtC,KAAKW,MAAMkC,SAClBvB,UAAU,6BACV+B,SAAUrD,KAAKkC,mBAGblC,KAAK0C,sBAEXvB,EAAAC,EAAAC,cAAA,SACIC,UAAU,4BACV8B,QAAQ,SAFZ,SAIAjC,EAAAC,EAAAC,cAAA,UACIY,KAAK,QACL1B,GAAG,QACHgB,IAAKvB,KAAKW,MAAMqB,MAAMzB,GACtB+B,MAAOtC,KAAKW,MAAMqB,MAAMC,KACxBX,UAAU,6BACV+B,SAAUrD,KAAKkC,mBAEblC,KAAKgD,sBAGX7B,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SACLa,MAAM,cACNhB,UAAU,6BACV6B,SAAUnD,KAAKuC,wBA/HpBZ,aCkIX4B,cAhIb,SAAAA,EAAY3D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuD,IACjB1D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyD,GAAApD,KAAAH,KAAMJ,KAuDRQ,aAAe,SAACoD,GACdnD,QAAQC,IAAI,uBAAwBkD,GACpC,IAAIC,EAAc5D,EAAKc,MAAM+C,MAC7BD,EAAcA,EAAYE,OAAO,SAAAD,GAAK,OAAIA,EAAMnD,KAAOiD,IAEvD3D,EAAKkC,SAAS,CACV2B,MAAOD,IAGXG,IAAMC,OADM,iDACOL,GACdM,KAAK,SAAAC,GACJ1D,QAAQC,IAAIyD,EAASC,SAnEVnE,EAuEnBoE,UAAY,SAACC,GACX7D,QAAQC,IAAI,mBAAoB4D,GAChC,IAAMC,EAAMtE,EAAKD,MAAMuE,IACnBnC,EAAQkC,EAAQlC,MACpB3B,QAAQC,IAAI,SAAU0B,GACtB,IAAMoC,EAAUtE,OAAAuE,EAAA,EAAAvE,CAAA,GAAOoE,GAEvBN,IAAMU,KAAKH,EAAMnC,EAAQ,SAAUoC,GAC9BN,KAAK,SAACC,GACL1D,QAAQC,IAAI,OAAQyD,EAASC,KAAKO,MAClC,IAAML,EAAUH,EAASC,KAAKO,KACvBb,EAAS7D,EAAKc,MAAd+C,MACPA,EAAMc,KAAKN,GAIXrE,EAAKkC,SAAS,CACZ2B,QACAe,aAAc,gDAGjBC,MAAM,SAACC,GACNtE,QAAQC,IAAI,SAAUqE,EAAMC,SAC5B/E,EAAKkC,SAAS,CACZ0C,aAAY,YAAA1B,OAAc4B,EAAMC,cA5FxC/E,EAAKc,MAAQ,CACXqB,MAAO,GACP0B,MAAO,GACPe,aAAc,GACdvB,OAAQ,IAPOrD,mFAWC,IAAAgF,EAAA7E,KACZmE,EAAMnE,KAAKJ,MAAMuE,IACnBnC,EAAQhC,KAAKJ,MAAMkF,UAGrBlB,IAAMmB,IADU,kDAEXjB,KAAK,SAACC,GACH1D,QAAQC,IAAI,SAAUyD,EAASC,MAC/B,IAAMd,EAASa,EAASC,KAAKpB,IAAI,SAACoC,GAC9B,OAAOA,EAAS,QAEpBH,EAAK9C,SAAU,CACXmB,aAMdU,IAAMmB,IAAIZ,EAAMnC,EAAQ,UACnB8B,KAAK,SAACC,GACL1D,QAAQC,IAAI,eAAgByD,GAC5B,IAAML,EAAQK,EAASC,KAAKpB,IAAI,SAACqC,GAC/B,OAAOA,EAAQ,OAGjBJ,EAAK9C,SAAS,CACZ2B,MAAOA,IAETrD,QAAQC,IAAI,aAAcuE,EAAKlE,MAAM+C,SAEtCgB,MAAM,SAACC,GACNtE,QAAQC,IAAI,UAAWqE,EAAMC,SAC7BC,EAAK9C,SAAU,CACb0C,aAAcE,EAAMC,6CAwDrB,IAAAM,EAAAlF,KACDmF,EAAWnF,KAAKW,MAAM+C,MAAMd,IAAI,SAAC2B,GAErC,OADElE,QAAQC,IAAI,YAAaiE,EAAKhE,IACzBY,EAAAC,EAAAC,cAAC+D,EAADtF,OAAAuF,OAAA,GACMd,EADN,CAEEhD,IAAKgD,EAAKhE,GACVC,mBAAoB0E,EAAK9E,kBAKpC,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACiE,EAAD,CACIpC,OAAQlD,KAAKW,MAAMuC,OACnBT,gBAAiBzC,KAAKiE,YACxBkB,UArHUxD,aCWL4D,mLAdX,OACEpE,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,uBAE7BH,EAAAC,EAAAC,cAACmE,EAAD,CACErB,IAAI,kDACJW,UAAS,yBATDnD,aCMZ8D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlC,KAAK,SAAAsC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3F,QACfsF,UAAUC,cAAcO,WAK1BpG,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBoE,MAAM,SAAAC,GACLtE,QAAQsE,MAAM,4CAA6CA,KCzEjE+B,IAASC,OAAOxF,EAAAC,EAAAC,cAACuF,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,qBAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAAjD,OAAMiE,qBAAN,sBAEPvB,GAiDV,SAAiCO,GAE/BmB,MAAMnB,GACHlC,KAAK,SAAAC,GAGkB,MAApBA,EAASqD,SACuD,IAAhErD,EAASsD,QAAQtC,IAAI,gBAAgBuC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMzD,KAAK,SAAAsC,GACjCA,EAAaoB,aAAa1D,KAAK,WAC7B6B,OAAOC,SAAS6B,aAKpB1B,EAAgBC,KAGnBtB,MAAM,WACLrE,QAAQC,IACN,mEArEAoH,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAMzD,KAAK,WACjCzD,QAAQC,IACN,+GAMJyF,EAAgBC,MCzCxB2B","file":"static/js/main.d5decc4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n        // could use state on card to build\n        // update card functionality\n        this.state = {\n            update: false,\n        }\n    };\n\n    handleDelete = () => {\n        console.log(this.props.id);\n        this.props.removeCardCallback(this.props.id)\n    };\n\n    handleUpdate = () => {\n        console.log(this.props.id);\n        this.props.updateCardCallback(this.props.id)\n    };\n\n\n    render() {\n        const {id, text} = this.props;\n        let icon = this.props.emoji;\n        if (icon !== undefined) {\n            icon = emoji.getUnicode(icon);\n        }\n        return (\n            <div className=\"card hvr-curl-bottom-right\" key={id}>\n                <section className=\"card__content\">\n                    <p className=\"card__content-text\"> {text} </p>\n                    <p className=\"card__content-emoji\"> {icon} </p>\n                    <section className=\"buttons\">\n                    {/*<button*/}\n                        {/*onClick={this.handleUpdate}*/}\n                        {/*type=\"button\"*/}\n                        {/*className=\"card__update btn hvr-grow-shadow\"*/}\n                        {/*aria-label=\"Update\"*/}\n                    {/*> UPDATE*/}\n                    {/*</button>*/}\n                    <button\n                        onClick={this.handleDelete}\n                        type=\"button\"\n                        className=\"card__delete btn hvr-grow-shadow\"\n                        aria-label=\"Remove\"\n                    > REMOVE\n                    </button>\n                    </section>\n                </section>\n            </div>\n        );\n    }\n}\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string,\n  emoji: PropTypes.string,\n  // updateCardCallback: PropTypes.func,\n  removeCardCallback: PropTypes.func,\n\n};\n\nexport default Card;\n","import React, { Component } from 'react';\n// import axios from 'axios';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\n\nconst EMOJI_LIST = [\"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\",\"100\",\"1234\",\"grinning\",\"grimacing\",\"grin\",\"joy\",\"rofl\",\"partying\",\"smiley\",\"smile\",\"sweat_smile\",\"laughing\",\"innocent\",\"wink\",\"blush\",\"slightly_smiling_face\",\"upside_down_face\",\"relaxed\",\"yum\",\"relieved\",\"heart_eyes\",\"smiling_face_with_three_hearts\",\"kissing_heart\",\"kissing\",\"kissing_smiling_eyes\",\"kissing_closed_eyes\",\"stuck_out_tongue_winking_eye\",\"zany\",\"raised_eyebrow\",\"monocle\",\"stuck_out_tongue_closed_eyes\",\"stuck_out_tongue\",\"money_mouth_face\",\"nerd_face\",\"sunglasses\",\"star_struck\",\"clown_face\",\"cowboy_hat_face\",\"hugs\",\"smirk\",\"no_mouth\",\"neutral_face\",\"expressionless\",\"unamused\",\"roll_eyes\",\"thinking\",\"lying_face\",\"hand_over_mouth\",\"shushing\",\"symbols_over_mouth\",\"exploding_head\",\"flushed\",\"pensive\",\"confused\",\"slightly_frowning_face\",\"frowning_face\",\"persevere\",\"confounded\",\"tired_face\",\"weary\",\"pleading\",\"triumph\",\"open_mouth\",\"scream\"]\nclass NewCardForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            emoji: '',\n            board: '',\n        };\n    }\n\n\n    resetState = () => {\n        this.setState({\n            text: '',\n            emoji: '',\n            board: { name: '' },\n        });\n    };\n\n    handleFormChanges = (e) => {\n        console.log('changes', e.target);\n        console.log('state', this.state);\n        const updatedState = {};\n        const field = e.target.name;\n\n        updatedState[field] = e.target.value;\n        this.setState(updatedState);\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        // require at least some text or an emoji\n        if (this.state.text === \"\" && this.state.emoji === \"\") return;\n        console.log('submit', this.state);\n        this.props.addCardCallback(this.state);\n        this.resetState();\n    };\n\n    renderEmojiOptions = () => {\n        const listEmojis = EMOJI_LIST.map((emojiStr, i) => {\n            return (\n                <option\n                    key={i}\n                    name=\"emoji\"\n                    value={emojiStr}\n                >\n                    {emoji.getUnicode(`${emojiStr}`)}\n                </option>)\n\n        });\n        return [<option name=\"board\" value=\"\" key=\"emoji-select\">Emoji Selector</option>, listEmojis];\n    };\n\n\n    renderBoardOptions = () => {\n        const listBoards = this.props.boards.map((board) => {\n            // console.log(board.board.name);\n            return (\n                <option\n                    name=\"board\"\n                    key={board.name}\n                    value={board.name}\n                >\n                    {board.name}\n                </option>)\n\n    });\n        return [<option name=\"board\" value=\"\" key=\"board-select\">Select a board</option>, listBoards];\n};\n\n    render() {\n        return(\n                <div className=\"new-card-form\">\n                    <form\n                        className=\"new-card-form__form\"\n                        onSubmit={this.handleSubmit}\n                    >\n                        <p className=\"new-card-form__header\">Add a Card</p>\n                        <label\n                            className=\"new-card-form__form-label\"\n                            htmlFor=\"Text\"\n                        >TEXT</label>\n                        <input\n                            type=\"text\"\n                            name=\"text\"\n                            value={this.state.text}\n                            className=\"new-card-form__form-textarea\"\n                            onChange={this.handleFormChanges}\n                            placeholder=\"Textual Inspiration\"\n\n                        />\n\n                        <label\n                            className=\"new-card-form__form-label\"\n                            htmlFor=\"Emoji\"\n                        >EMOJI</label>\n                        <select\n                            name=\"emoji\"\n                            id=\"emoji\"\n\n                            key={this.props.value}\n                            value={this.state.emojiStr}\n                            className=\"new-card-form__form-select\"\n                            onChange={this.handleFormChanges}\n\n                        >\n                            { this.renderEmojiOptions() }\n                        </select>\n                        <label\n                            className=\"new-card-form__form-label\"\n                            htmlFor=\"board\"\n                        >BOARD</label>\n                        <select\n                            name=\"board\"\n                            id=\"board\"\n                            key={this.state.board.id}\n                            value={this.state.board.name}\n                            className=\"new-card-form__form-select\"\n                            onChange={this.handleFormChanges}\n                        >\n                            { this.renderBoardOptions() }\n                        </select>\n\n                        <input type=\"submit\"\n                               value=\"Create Card\"\n                               className=\"new-card-form__form-button\"\n                               onSubmit={this.handleSubmit}\n                        />\n                    </form>\n                </div>\n\n        )\n    }\n}\n\nNewCardForm.propTypes = {\n    boards: PropTypes.array,\n    addCardCallback: PropTypes.func\n};\n\nexport default NewCardForm","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      board: '',\n      cards: [],\n      errorMessage: '',\n      boards: [],\n    };\n}\n\n  componentDidMount() {\n    const url = this.props.url;\n    let board = this.props.boardName;\n    // get all the available boards for add a card options\n      let boardsUrl = \"https://inspiration-board.herokuapp.com/boards\";\n      axios.get(boardsUrl)\n          .then((response) => {\n              console.log('boards', response.data);\n              const boards = response.data.map((boardData) => {\n                  return boardData[\"board\"];\n              });\n              this.setState ({\n                  boards,\n              })\n          });\n\n\n    //call axios after mounted\n    axios.get(url + board + '/cards')\n        .then((response) => {\n          console.log('get response', response);\n          const cards = response.data.map((cardData) => {\n            return cardData['card'];\n          });\n\n          this.setState({\n            cards: cards,\n          });\n          console.log('this state', this.state.cards);\n        })\n        .catch((error) => {\n          console.log('errors:', error.message);\n          this.setState ({\n            errorMessage: error.message\n          });\n        });\n  }\n\n  // handleUpdate = (cardId) => {\n  //   // console.log('update card with id:', id);\n  //   let apiUpdate;\n  //   const url = 'https://inspiration-board.herokuapp.com/cards/'\n  //   // axios.put(url + cardId, apiUpdate)\n  // };\n\n  handleDelete = (cardId) => {\n    console.log('delete card with id:', cardId);\n    let updatedList = this.state.cards ;\n    updatedList = updatedList.filter(cards => cards.id !== cardId);\n\n    this.setState({\n        cards: updatedList,\n     });\n    const url = 'https://inspiration-board.herokuapp.com/cards/';\n    axios.delete(url + cardId)\n        .then(response => {\n          console.log(response.data);\n        })\n  };\n\n  handleAdd = (newCard) => {\n    console.log('handle adding to', newCard);\n    const url = this.props.url;\n    let board = newCard.board;\n    console.log('board:', board);\n    const apiPayload = {...newCard };\n\n    axios.post(url + board + '/cards', apiPayload)\n        .then((response) => {\n          console.log('post', response.data.card);\n          const newCard = response.data.card;\n          const {cards} = this.state;\n          cards.push(newCard);\n          // instead of pushing could use spread operator\n          //  to push new card data to array of cards\n          //  const cards = [newCard, ...this.state.cards];\n          this.setState({\n            cards,\n            errorMessage: 'Card Added! Go forth full of inspiration.',\n          })\n        })\n        .catch((error) => {\n          console.log('errors', error.message);\n          this.setState({\n            errorMessage: `Failure! ${error.message}`,\n          })\n        });\n    };\n\n  render() {\n    const cardList = this.state.cards.map((card) => {\n        console.log('card info', card.id);\n      return <Card\n               {...card}\n               key={card.id}\n               removeCardCallback={this.handleDelete}\n               // updateCardCallback={this.handleUpdate}\n            />\n    });\n    // console.log('Cardlist:', cardList);\n    return (\n      <div className=\"board\">\n        <NewCardForm\n            boards={this.state.boards}\n            addCardCallback={this.handleAdd}/>\n        { cardList }\n      </div>\n    )\n  }\n\n}\n\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string,\n};\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <section>\n        <header className=\"header\">\n          <h1 className=\"header__h1\"><span className=\"header__text\">Inspiration Board</span></h1>\n        </header>\n        <Board\n          url=\"https://inspiration-board.herokuapp.com/boards/\"\n          boardName={`elle-johnnie`}\n          />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}